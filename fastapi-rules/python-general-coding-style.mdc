---
description: Enforces general Python coding style guidelines, including functional programming preferences and naming conventions.
globs: **/*.py
alwaysApply: false
---
- Write concise, technical responses with accurate Python examples.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
- Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
- Use the Receive an Object, Return an Object (RORO) pattern. 
- Use def for pure functions and async def for asynchronous operations.
- Use type hints for all function signatures.
- Prefer Pydantic models over raw dictionaries for input validation.
- Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).